makeVector <- function(x = numeric()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setmean <- function(mean) m <<- mean
getmean <- function() m
list(set = set, get = get,
setmean = setmean,
getmean = getmean)
}
cachemean <- function(x, ...) {
m <- x$getmean()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- mean(data, ...)
x$setmean(m)
m
}
cachmean(c(1,2,3,4,5))
?cachemean
cachemean(c(1,2,3,4,5))
test <- data.frame(blah = c(1,2,3,4,5))
test
cachemean(test)
makeVector(c(1,2,3,4,5))
makeVector(c(1,2,3,4,5))
testarooni <- c(1,2,3,4,5)
testarooni
makeVector(testarooni)
testarooni
cachemean(testarooni)
makeVector(test)
cachemean(test)
help(getmean)
help()
help(show
help(show)
help(show)
show(test)
show(testarooni)
get(test)
?get
get()
get(testarooni)
str(testarooni)
str(test)
get() test
get(test)
dpr(style = 3, abilityMod = 3, attacks = 2.5, weaponDie = c(1,8), advantage = TRUE)
dpr <- function(style = 0,
abilityMod = 3,
attacks = 1,
weaponDie = c(1,6),
hitRate = 0.60,
critRate = 0.05,
TWF = c(0,0),
static = 0,
sneakAttack = 0,
advantage = FALSE) {
sneakDamage <- 3.5*sneakAttack
weaponDamage <- weaponDie[1] * (weaponDie[2] + 1) / 2
twfDamage <- TWF[1] * (TWF[2] + 1) / 2
twfStatic <- static
static <- static + abilityMod
#Implementing fighting styles.
if (style == 1) {
weaponDamage <- (weaponDie[1]*
((sum(3:weaponDie[2])/(weaponDie[2]-2))*
((weaponDie[2]-2)/weaponDie[2])+
(sum(1:weaponDie[2])/weaponDie[2])*
2/weaponDie[2]))
} else if (style == 2) {
twfStatic <- twfStatic + abilityMod
} else if (style == 3) {
static <- static + 2
} else if (style == 4) {
hitRate <- hitRate + 0.1
}
#Calculating chances of hitting without and with advantage.
if (advantage == FALSE) {
chanceOfHitting <- hitRate
chanceOfCritting <- critRate
} else if (advantage == TRUE) {
chanceOfHitting <- 1-(1-hitRate)^2
chanceOfCritting  <- 1-(1-critRate)^2
}
#Adjusting totalAttacks for TWF in case of sneak attack.
if (TWF[1] > 0) {
totalAttacks <- attacks + 1
} else {
totalAttacks <- attacks
}
#Calculating chance of hitting at all for sneak attack.
chanceOfHittingAtAll <- 1-(1-chanceOfHitting)^totalAttacks
chanceOfCrittingAtAll <- 1-(1-chanceOfCritting)^totalAttacks
damagePerRound <- ((weaponDamage+static)*chanceOfHitting+
weaponDamage*chanceOfCritting)*attacks+
(twfDamage+twfStatic)*chanceOfHitting+
twfDamage*chanceOfCritting+
sneakDamage*chanceOfHittingAtAll+
sneakDamage*chanceOfCrittingAtAll
damagePerRound
}
# dpr(twfStyle, abilityMod = 5, attacks = 4, weaponDie = c(1,6), TWF = c(1,6), critRate = 0.15) #Champion TWF fighter 20
# dpr(oneHanded, abilityMod = 5, attacks = 4, weaponDie = c(1,8), critRate = 0.05) #Battlemaster duely fighter w/o superiority dice 20
# dpr(greatWeapon, abilityMod = 5, attacks = 4, weaponDie = c(2,6), critRate = 0.15) #Champion Greatweapon fighter 20
# dpr(archery, abilityMod = 5, attacks = 4, weaponDie = c(1,8), critRate = 0.15) #Champion archer fighter 20
# dpr(0, abilityMod = 5, attacks = 4, weaponDie = c(1,8), critRate = 0.05) #Battlemaster fighter 20; no style/armour
# dpr(0, abilityMod = 5, weaponDie = c(1,6), sneakAttack = 10) #Rogue shortbow or shortsword 20, no advantage
# dpr(0, abilityMod = 5, weaponDie = c(1,6), TWF = c(1,6), sneakAttack = 10) #Rogue 2x shortsword 20, no advantage
# dpr(0, abilityMod = 5, weaponDie = c(1,6), sneakAttack = 10, advantage = TRUE) #Rogue shortbow or shortsword 20, ADVANTAGE
# dpr(0, abilityMod = 5, weaponDie = c(1,6), TWF = c(1,6), sneakAttack = 10, advantage = TRUE) #Rogue 2x shortsword 20, ADVANTAGE
#Function to generate ability scores (4d6 drop lowest).
abilityScores <- function() {
scores <- c()
for (i in 1:6) {
oneScore <- ceiling(runif(4,0,6))
oneScore <- sum(oneScore) - min(oneScore)
scores[i] <- oneScore
}
scores
}
abilityScores()
#Average HP; not kill rate.
armorClassProtection <- function(AC = 16,
toHit = 3,
critRate = 0.05,
attacks = 1,
damageDice = c(1,6),
staticDamage = 3,
damageReduction = 0,
damageResistance = FALSE,
advantage = FALSE,
hitPoints = 13) {
hitsOn <- AC - toHit
hitRate <- 1- hitsOn/20
normalDamage <- damageDice[1] * (damageDice[2] + 1) / 2
#Taking advantage into account.
if (advantage == FALSE) {
chanceOfHitting <- hitRate
chanceOfCritting <- critRate
} else if (advantage == TRUE) {
chanceOfHitting <- 1-(1-hitRate)^2
chanceOfCritting  <- 1-(1-critRate)^2
}
damageTaken <- attacks * (chanceOfHitting * (normalDamage + staticDamage - damageReduction) + chanceOfCritting * (normalDamage)) / (as.integer(damageResistance) + 1)
RTD <- hitPoints/damageTaken
c(damageTaken, RTD)
}
get(dpr)
get("dpr")
get("test")
get("testarooni")
makevector(test)
makeVector(test)
testor <- makevector(testarooni)
testor <- makeVector(testarooni)
cachemean(testor)
cachemean(testor)
makeCacheMatrix <- function(x = matrix()) {
cacheMatrix <- NULL
setCacheMatrix <- function(y) {
x <<- y
cacheMatrix <<- NULL
}
getCacheMatrix <- function() x
setInverseMatrix <- function(someMatrix) cacheMatrix <<- someMatrix
getInverseMatrix <- function() cacheMatrix
list(setCacheMatrix = setCacheMatrix,
getCacheMatrix = getCacheMatrix,
setInverseMatrix = setInverseMatrix,
getInverseMatrix = getInverseMatrix)
}
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
cacheMatrix <- x$getInverseMatrix
if (!is.null(cacheMatrix)) {
message("Getting cached matrix.")
return(cacheMatrix)
}
data <- x$getCacheMatrix()
cacheMatrix <- solve(data, ...)
x$setCacheMatrix(cacheMatrix)
cacheMatrix
}
makeCacheMatrix(X)
Xon <- makeCacheMatrix(X)
cacheSolve(Xon)
makeCacheMatrix <- function(x = matrix()) {
cacheMatrix <- NULL
setCacheMatrix <- function(y) {
x <<- y
cacheMatrix <<- NULL
}
getCacheMatrix <- function() x
setInverseMatrix <- function(solve) cacheMatrix <<- solve
getInverseMatrix <- function() cacheMatrix
list(setCacheMatrix = setCacheMatrix,
getCacheMatrix = getCacheMatrix,
setInverseMatrix = setInverseMatrix,
getInverseMatrix = getInverseMatrix)
}
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
cacheMatrix <- x$getInverseMatrix
if (!is.null(cacheMatrix)) {
message("Getting cached matrix.")
return(cacheMatrix)
}
data <- x$getCacheMatrix()
cacheMatrix <- solve(data, ...)
x$setCacheMatrix(cacheMatrix)
cacheMatrix
}
Xon
makeCacheMatrix(X)
Xon <- makeCacheMatrix(X)
cacheSolve(Xon)
get <- function() x
get()
x <- 1
get()
makeVector(test)
testor <- makeVector(testarooni)
cachemean(testor)
cachemean(testor)
cachemean(testor)
testor <- makeVector(testarooni)
cachemean(testor)
testor <- makeVector(testarooni)
testor
?set
makeVector <- function(x = numeric()) {
m <- NULL
#       set <- function(y) {
#             x <<- y
#             m <<- NULL
#       }
get <- function() x
setmean <- function(mean) m <<- mean
getmean <- function() m
list(set = set, get = get,
setmean = setmean,
getmean = getmean)
}
cachemean <- function(x, ...) {
m <- x$getmean()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- mean(data, ...)
x$setmean(m)
m
}
makeVector(test)
makeVector <- function(x = numeric()) {
m <- NULL
#       set <- function(y) {
#             x <<- y
#             m <<- NULL
#       }
get <- function() x
setmean <- function(mean) m <<- mean
getmean <- function() m
list(
#             set = set,
get = get,
setmean = setmean,
getmean = getmean)
}
makeVector(test)
cachemean(testor)
cachemean(testor)
testor
test
testor <- makeVector(testarooni)
cachemean(testor)
cachemean(testor)
testor
testorooni
testarooni
cachemean(testor)
testor
testarooni$getmean()
testarooni$getmean
testor$getmean()
testor
testor#getmean
testor$getmean
testor$getmean()
m
m
?m
makeVector <- function(x = numeric()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setmean <- function(mean) m <<- mean
getmean <- function() m
list(set = set, get = get,
setmean = setmean,
getmean = getmean)
}
cachemean <- function(x, ...) {
m <- x$getmean()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- mean(data, ...)
x$setmean(m)
m
}
testor <- makeVector(testarooni)
cachemean(testor)
cachemean(testor)
testor$getmean
testor$getmean()
m
rm(m)
testor <- makeVector(testarooni)
cachemean(testor)
testor
testor$getmean()
testor$getmean
m
makeCacheMatrix <- function(x = matrix()) {
cacheMatrix <- NULL
setCacheMatrix <- function(y) {
x <<- y
cacheMatrix <<- NULL
}
getCacheMatrix <- function() x
setInverseMatrix <- function(solve) cacheMatrix <<- solve
getInverseMatrix <- function() cacheMatrix
list(setCacheMatrix = setCacheMatrix,
getCacheMatrix = getCacheMatrix,
setInverseMatrix = setInverseMatrix,
getInverseMatrix = getInverseMatrix)
}
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
cacheMatrix <- x$getInverseMatrix
if (!is.null(cacheMatrix)) {
message("Getting cached matrix.")
return(cacheMatrix)
}
data <- x$getCacheMatrix()
cacheMatrix <- solve(data, ...)
x$setCacheMatrix(cacheMatrix)
cacheMatrix
}
cacheSolve
makeCacheMatrix
X
Xon <- makeCacheMatrix(X)
Xon
cacheSolve(Xon)
blu <- cacheSolve(Xon)
blu
makeCacheMatrix <- function(x = matrix()) {
cacheMatrix <- NULL
setCacheMatrix <- function(y) {
x <<- y
cacheMatrix <<- NULL
}
getCacheMatrix <- function() x
setInverseMatrix <- function(solve) cacheMatrix <<- solve
getInverseMatrix <- function() cacheMatrix
print(cacheMatrix)
list(setCacheMatrix = setCacheMatrix,
getCacheMatrix = getCacheMatrix,
setInverseMatrix = setInverseMatrix,
getInverseMatrix = getInverseMatrix)
}
makeCacheMatrix(X)
makeCacheMatrix <- function(x = matrix()) {
cacheMatrix <- NULL
setCacheMatrix <- function(y) {
x <<- y
cacheMatrix <<- NULL
}
getCacheMatrix <- function() x
setInverseMatrix <- function(solve) cacheMatrix <<- solve
getInverseMatrix <- function() cacheMatrix
list(setCacheMatrix = setCacheMatrix,
getCacheMatrix = getCacheMatrix,
setInverseMatrix = setInverseMatrix,
getInverseMatrix = getInverseMatrix)
}
Xon <- makeCacheMatrix(X)
cacheSolve(Xon)
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
cacheMatrix <- x$getInverseMatrix
if (!is.null(cacheMatrix)) {
message("Getting cached matrix.")
return(cacheMatrix)
}
data <- x$getCacheMatrix()
print("Data is:")
print(data)
cacheMatrix <- solve(data, ...)
x$setCacheMatrix(cacheMatrix)
cacheMatrix
}
cacheSolve(Xon)
Xon <- makeCacheMatrix(X)
cacheSolve(Xon)
Xon
?m
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
cacheMatrix <- x$getInverseMatrix
print("cacheMatrix is")
print(cacheMatrix)
if (!is.null(cacheMatrix)) {
message("Getting cached matrix.")
return(cacheMatrix)
}
data <- x$getCacheMatrix()
print("Data is:")
print(data)
cacheMatrix <- solve(data, ...)
x$setCacheMatrix(cacheMatrix)
cacheMatrix
}
cacheSolve(Xon)
makeCacheMatrix <- function(x = matrix()) {
cacheMatrix <- NULL
setCacheMatrix <- function(y) {
x <<- y
cacheMatrix <<- NULL
}
getCacheMatrix <- function() x
setInverseMatrix <- function(someMatrix) cacheMatrix <<- someMatrix
getInverseMatrix <- function() cacheMatrix
list(setCacheMatrix = setCacheMatrix,
getCacheMatrix = getCacheMatrix,
setInverseMatrix = setInverseMatrix,
getInverseMatrix = getInverseMatrix)
}
Xon <- makeCacheMatrix(X)
Xon
cacheSolve(Xon)
a <- c(1,2,3,4,5)
b <- makeVector(a)
cachemean(b)
b$getmean
cachemean(b)
b <- makeVector(a)
b
b$getmean
b$getmean()
Xon$getmean
Xon <- makeCacheMatrix(X)
Xon
cacheSolve(Xon)
Xon$getmean
cachemean(b)
cachemean(b)
b$getmean()
b$getmean
b$getmean()
m
b
b$getmean()
b$getmean
b <- makeVector(a)
b$getmean()
b$getmean
cachemean(b)
b$getmean()
b$getmean
makeVector <- function(x = numeric()) {
m <- NULL
#       set <- function(y) {
#             x <<- y
#             m <<- NULL
#       }
get <- function() x
setmean <- function(mean) m <<- mean
getmean <- function() m
list(
#             set = set,
get = get,
setmean = setmean,
getmean = getmean)
}
b <- makeVector(a)
b
b$getmean()
b$getmean
cachemean(b)
b$getmean()
b$getmean
cachemean(b)
b$getmean()
b$getmean
cachemean(b)
